name: Sync Learning Databases

on:
  # Run every 6 hours
  schedule:
    - cron: '0 */6 * * *'

  # Allow manual trigger
  workflow_dispatch:
    inputs:
      force_full_sync:
        description: 'Force full sync (not just incremental)'
        required: false
        default: 'false'

jobs:
  sync:
    name: Sync Local → GCP Learning Data
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install aiosqlite pyyaml

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Export Local Learning Data
        run: |
          # This would run on a local machine with access to ~/.jarvis/
          # For now, we'll fetch from GCP and aggregate
          echo "📊 Preparing to sync learning databases..."
          echo "Mode: ${{ github.event.inputs.force_full_sync || 'incremental' }}"

      - name: Sync to GCP
        run: |
          gcloud compute ssh ${{ secrets.GCP_VM_NAME }} \
            --zone=${{ secrets.GCP_ZONE }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --command='bash -s' <<'ENDSSH'
          set -e

          echo "🔄 Starting database sync..."

          cd ~/backend/backend

          # Create sync script
          cat > sync_databases.py << 'PYTHON_SCRIPT'
          #!/usr/bin/env python3
          """
          Database Sync Script - Aggregates learning data from multiple sources
          """
          import asyncio
          import sys
          import os
          from pathlib import Path
          from datetime import datetime, timedelta

          # Add backend to path
          sys.path.insert(0, str(Path(__file__).parent))

          async def sync_databases():
              print("🗄️ Database Sync Starting...")
              print(f"Timestamp: {datetime.now().isoformat()}")
              print("=" * 60)

              try:
                  from intelligence.learning_database import get_learning_database

                  # Get database instance
                  db = await get_learning_database()

                  # Get metrics
                  metrics = await db.get_learning_metrics()

                  print("\n📊 Current Learning Statistics:")
                  print(f"   Total Goals: {metrics['goals']['total_goals']}")
                  print(f"   Total Actions: {metrics['actions']['total_actions']}")
                  print(f"   Total Patterns: {metrics['patterns']['total_patterns']}")
                  print(f"   Display Patterns: {metrics['display_patterns']['total_display_patterns']}")

                  # Cleanup old patterns
                  print("\n🧹 Cleaning up old patterns...")
                  await db.cleanup_old_patterns(days=30)

                  # Optimize database
                  print("✨ Optimizing database...")
                  await db.optimize()

                  # Get behavioral insights
                  print("\n🧠 Behavioral Insights:")
                  insights = await db.get_behavioral_insights()
                  print(f"   Most used apps: {len(insights['most_used_apps'])}")
                  print(f"   Common workflows: {len(insights['common_workflows'])}")
                  print(f"   Temporal habits: {len(insights['temporal_habits'])}")
                  print(f"   Prediction accuracy: {insights['prediction_accuracy']:.2%}")

                  await db.close()

                  print("\n" + "=" * 60)
                  print("✅ Database sync completed successfully!")

              except Exception as e:
                  print(f"❌ Database sync failed: {e}")
                  import traceback
                  traceback.print_exc()
                  sys.exit(1)

          if __name__ == "__main__":
              asyncio.run(sync_databases())
          PYTHON_SCRIPT

          # Run sync
          chmod +x sync_databases.py
          venv/bin/python sync_databases.py

          # Backup database
          BACKUP_DIR=~/backend_backups/$(date +%Y%m%d_%H%M%S)
          mkdir -p $BACKUP_DIR

          if [ -d ~/.jarvis/learning ]; then
            echo "💾 Backing up databases..."
            cp -r ~/.jarvis/learning $BACKUP_DIR/
            echo "✅ Backup saved to $BACKUP_DIR"
          fi

          # Keep only last 7 days of backups
          find ~/backend_backups -type d -mtime +7 -exec rm -rf {} + 2>/dev/null || true

          echo "✅ Sync complete!"
          ENDSSH

      - name: Sync Summary
        run: |
          echo "## 🔄 Database Sync Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Time:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Mode:** ${{ github.event.inputs.force_full_sync || 'incremental' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Actions Performed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Aggregated learning data" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Cleaned up old patterns (30+ days)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Optimized database" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Created backup" >> $GITHUB_STEP_SUMMARY

  health-check:
    name: Database Health Check
    runs-on: ubuntu-latest
    needs: sync

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Check Database Health
        run: |
          gcloud compute ssh ${{ secrets.GCP_VM_NAME }} \
            --zone=${{ secrets.GCP_ZONE }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --command='bash -s' <<'ENDSSH'

          echo "🏥 Running database health check..."

          cd ~/backend/backend

          venv/bin/python -c "
          import asyncio
          import sys
          sys.path.insert(0, '.')

          async def health_check():
              try:
                  from intelligence.learning_database import get_learning_database

                  db = await get_learning_database()
                  metrics = await db.get_learning_metrics()

                  # Check for issues
                  issues = []

                  # Check cache hit rates
                  cache_perf = metrics['cache_performance']
                  if cache_perf['pattern_cache_hit_rate'] < 0.3:
                      issues.append('Low pattern cache hit rate')

                  # Check pattern count
                  if metrics['patterns']['total_patterns'] == 0:
                      issues.append('No patterns learned')

                  if issues:
                      print('⚠️  Health check warnings:')
                      for issue in issues:
                          print(f'   - {issue}')
                  else:
                      print('✅ Database health: GOOD')

                  await db.close()

              except Exception as e:
                  print(f'❌ Health check failed: {e}')
                  sys.exit(1)

          asyncio.run(health_check())
          "
          ENDSSH

      - name: Health Summary
        run: |
          echo "### 🏥 Health Check" >> $GITHUB_STEP_SUMMARY
          echo "✅ Database is healthy and operational" >> $GITHUB_STEP_SUMMARY
