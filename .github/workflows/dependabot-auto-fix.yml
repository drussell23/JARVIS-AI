name: Dependabot Auto-Fix & Auto-Merge

on:
  pull_request_target:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  # ============================================================================
  # Auto-fix common issues
  # ============================================================================
  auto-fix:
    name: Auto-Fix Issues
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install fix tools
        run: |
          pip install black isort autoflake pyupgrade autopep8

      - name: Auto-fix Python code
        run: |
          echo "üîß Auto-fixing Python code..."

          # Remove unused imports
          find backend/ -name "*.py" -exec autoflake \
            --remove-all-unused-imports \
            --remove-unused-variables \
            --in-place {} +

          # Upgrade Python syntax to 3.10+
          find backend/ -name "*.py" -exec pyupgrade --py310-plus {} +

          # Fix PEP8 issues
          autopep8 --in-place --recursive --aggressive backend/

          # Sort imports
          isort backend/

          # Format with Black
          black backend/

          echo "‚úÖ Auto-fix complete"

      - name: Check for changes
        id: changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit auto-fixes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "chore: Auto-fix code style and imports

          - Remove unused imports
          - Upgrade Python syntax to 3.10+
          - Fix PEP8 issues
          - Sort imports with isort
          - Format with Black

          ü§ñ Auto-generated by GitHub Actions"
          git push

  # ============================================================================
  # Wait for checks and auto-merge if safe
  # ============================================================================
  auto-merge:
    name: Auto-Merge Safe Updates
    runs-on: ubuntu-latest
    needs: auto-fix
    if: always() && github.actor == 'dependabot[bot]'

    steps:
      - name: Fetch Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Wait for checks to complete
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          running-workflow-name: 'Auto-Merge Safe Updates'

      - name: Auto-approve patch updates
        if: |
          steps.metadata.outputs.update-type == 'version-update:semver-patch'
        run: |
          echo "üì¶ Patch update detected - auto-approving"
          gh pr review --approve "$PR_URL" --body "‚úÖ Auto-approved: Patch version update"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify all checks passed
        id: verify
        run: |
          # Get check run status
          CHECKS=$(gh pr checks "$PR_URL" --json state,name)

          # Check if any failed
          FAILED=$(echo "$CHECKS" | jq '[.[] | select(.state == "FAILURE")] | length')
          PENDING=$(echo "$CHECKS" | jq '[.[] | select(.state == "PENDING")] | length')

          if [ "$FAILED" -gt 0 ]; then
            echo "has_failures=true" >> $GITHUB_OUTPUT
            echo "‚ùå $FAILED checks failed - cannot auto-merge"
            exit 1
          fi

          if [ "$PENDING" -gt 0 ]; then
            echo "has_pending=true" >> $GITHUB_OUTPUT
            echo "‚è≥ $PENDING checks still pending - waiting..."
            exit 1
          fi

          echo "all_passed=true" >> $GITHUB_OUTPUT
          echo "‚úÖ All checks passed!"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto-merge patch updates
        if: |
          steps.metadata.outputs.update-type == 'version-update:semver-patch' &&
          steps.verify.outputs.all_passed == 'true'
        run: |
          echo "üöÄ Auto-merging patch update - all checks passed"
          gh pr merge --auto --squash "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto-approve minor updates for trusted packages
        if: |
          steps.metadata.outputs.update-type == 'version-update:semver-minor' &&
          contains('pytest,flake8,black,isort,mypy', steps.metadata.outputs.dependency-names)
        run: |
          echo "‚úÖ Minor update for trusted package - auto-approving"
          gh pr review --approve "$PR_URL" --body "‚úÖ Auto-approved: Minor version update for trusted dev dependency"
          gh pr merge --auto --squash "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on major updates
        if: steps.metadata.outputs.update-type == 'version-update:semver-major'
        run: |
          gh pr comment "$PR_URL" --body "‚ö†Ô∏è  **Major Version Update**

          This is a major version update that may contain breaking changes.
          Please review carefully before merging.

          **Dependency:** \`${{ steps.metadata.outputs.dependency-names }}\`
          **Update Type:** Major version change

          ### Review Checklist
          - [ ] Review changelog for breaking changes
          - [ ] Test locally
          - [ ] Update code if needed
          - [ ] Verify all tests pass"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        if: always()
        run: |
          echo "## ü§ñ Dependabot Auto-Fix Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Dependency:** \`${{ steps.metadata.outputs.dependency-names }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Update Type:** \`${{ steps.metadata.outputs.update-type }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.metadata.outputs.update-type }}" == "version-update:semver-patch" ]]; then
            echo "‚úÖ **Auto-merged:** Patch update" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ steps.metadata.outputs.update-type }}" == "version-update:semver-minor" ]]; then
            echo "‚ö†Ô∏è  **Requires review:** Minor update" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Requires manual review:** Major update" >> $GITHUB_STEP_SUMMARY
          fi

  # ============================================================================
  # Rollback if auto-merge causes issues
  # ============================================================================
  rollback-on-failure:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: auto-merge
    if: failure() && github.actor == 'dependabot[bot]'

    steps:
      - name: Revert auto-merge
        run: |
          echo "‚ùå Auto-merge failed - reverting"
          gh pr close "$PR_URL" --comment "Auto-merge failed. Closing for manual review."
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
