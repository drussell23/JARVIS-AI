#!/usr/bin/env python3
"""
Test Window Intelligence - Dynamic Window Understanding Through Pure Vision
Tests JARVIS's ability to count, track, and understand windows using Claude's vision
"""

import asyncio
import sys
import os
import logging

# Add backend to path
backend_path = os.path.join(os.path.dirname(__file__), 'backend')
if backend_path not in sys.path:
    sys.path.insert(0, backend_path)

from backend.chatbots.claude_vision_chatbot import ClaudeVisionChatbot

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


async def test_window_counting():
    """Test ability to count windows across different views"""
    
    chatbot = ClaudeVisionChatbot()
    
    if not chatbot.is_available():
        logger.error("Claude API not available. Please set ANTHROPIC_API_KEY")
        return
    
    print("\nü™ü Testing Window Counting & Understanding\n")
    print("=" * 70)
    
    test_scenarios = [
        {
            'view': 'Normal Desktop',
            'setup': 'Regular desktop with multiple windows open',
            'queries': [
                "How many windows are open?",
                "Count all the windows on my screen",
                "What applications are running?"
            ]
        },
        {
            'view': 'Mission Control',
            'setup': 'Trigger Mission Control to show all windows',
            'queries': [
                "How many windows do I have across all spaces?",
                "Count windows per desktop space",
                "Which space has the most windows?"
            ]
        },
        {
            'view': 'Application Expos√©',
            'setup': 'Show all windows for current application',
            'queries': [
                "How many windows does this app have?",
                "Count the tabs in my browser",
                "Are there any hidden windows for this app?"
            ]
        },
        {
            'view': 'Mixed Visibility',
            'setup': 'Some windows visible, some minimized, some on other spaces',
            'queries': [
                "How many windows total including minimized?",
                "What's hidden or minimized?",
                "Can you see windows on other desktops?"
            ]
        }
    ]
    
    for scenario in test_scenarios:
        print(f"\nüì± View Type: {scenario['view']}")
        print(f"üîß Setup: {scenario['setup']}")
        print("-" * 70)
        
        for query in scenario['queries']:
            print(f"\n‚ùì Query: {query}")
            
            try:
                response = await chatbot.analyze_screen_with_vision(query)
                print(f"\nü§ñ JARVIS Response:")
                print(response)
                
                # Check for window counting intelligence
                window_indicators = [
                    'window', 'windows', 'space', 'desktop',
                    'application', 'app', 'running', 'open',
                    'minimized', 'hidden', 'visible'
                ]
                
                shows_understanding = any(indicator in response.lower() for indicator in window_indicators)
                has_numbers = any(char.isdigit() for char in response)
                
                print(f"\n{'‚úÖ' if shows_understanding and has_numbers else '‚ö†Ô∏è'} "
                      f"Window understanding: {'Good' if shows_understanding else 'Limited'}, "
                      f"Counting: {'Yes' if has_numbers else 'No'}")
                
            except Exception as e:
                print(f"‚ùå Error: {e}")
            
            await asyncio.sleep(2)


async def test_window_relationships():
    """Test understanding of window relationships and hierarchy"""
    
    chatbot = ClaudeVisionChatbot()
    
    if not chatbot.is_available():
        return
    
    print("\n\nüîó Testing Window Relationships & Hierarchy\n")
    print("=" * 70)
    
    relationship_queries = [
        {
            'type': 'Stacking Order',
            'query': "Which window is on top?",
            'expected': "Should identify the active/focused window"
        },
        {
            'type': 'Parent-Child',
            'query': "Does this dialog belong to any application?",
            'expected': "Should recognize dialog-app relationships"
        },
        {
            'type': 'Spatial Relationships',
            'query': "How are my windows arranged?",
            'expected': "Should describe tiled, overlapping, etc."
        },
        {
            'type': 'Application Grouping',
            'query': "Group my windows by application",
            'expected': "Should organize windows by their parent apps"
        },
        {
            'type': 'Workspace Organization',
            'query': "How are my desktop spaces organized?",
            'expected': "Should describe space usage patterns"
        }
    ]
    
    for test in relationship_queries:
        print(f"\nüîç Relationship Type: {test['type']}")
        print(f"‚ùì Query: {test['query']}")
        print(f"‚úÖ Expected: {test['expected']}")
        
        try:
            response = await chatbot.analyze_screen_with_vision(test['query'])
            print(f"\nü§ñ JARVIS: {response}")
            
        except Exception as e:
            print(f"‚ùå Error: {e}")
        
        await asyncio.sleep(2)


async def test_window_states():
    """Test detection of various window states"""
    
    chatbot = ClaudeVisionChatbot()
    
    if not chatbot.is_available():
        return
    
    print("\n\nüîÑ Testing Window State Detection\n")
    print("=" * 70)
    
    state_queries = [
        "Which window has focus?",
        "Are any windows minimized?",
        "What's partially hidden?",
        "Which windows are in fullscreen?",
        "What's running in the background?"
    ]
    
    for query in state_queries:
        print(f"\n‚ùì State Query: {query}")
        
        try:
            response = await chatbot.analyze_screen_with_vision(query)
            print(f"\nü§ñ JARVIS: {response}")
            
            # Check for state awareness
            state_words = ['focus', 'active', 'minimized', 'hidden', 'fullscreen', 'background', 'foreground']
            has_state_awareness = any(word in response.lower() for word in state_words)
            
            print(f"{'‚úÖ' if has_state_awareness else '‚ö†Ô∏è'} State awareness: "
                  f"{'Present' if has_state_awareness else 'Limited'}")
            
        except Exception as e:
            print(f"‚ùå Error: {e}")
        
        await asyncio.sleep(2)


async def test_workflow_detection():
    """Test ability to recognize workflow patterns from window arrangements"""
    
    chatbot = ClaudeVisionChatbot()
    
    if not chatbot.is_available():
        return
    
    print("\n\nüíº Testing Workflow Pattern Detection\n")
    print("=" * 70)
    
    workflow_scenarios = [
        {
            'setup': 'VS Code + Terminal + Browser side by side',
            'query': "What workflow does my window arrangement suggest?",
            'expected': "Should recognize development workflow"
        },
        {
            'setup': 'Multiple browser windows with docs/research',
            'query': "What am I working on based on my windows?",
            'expected': "Should identify research/learning workflow"
        },
        {
            'setup': 'Slack + Email + Calendar visible',
            'query': "Analyze my current work mode",
            'expected': "Should recognize communication/collaboration mode"
        }
    ]
    
    for scenario in workflow_scenarios:
        print(f"\nüí° Setup: {scenario['setup']}")
        print(f"‚ùì Query: {scenario['query']}")
        print(f"‚úÖ Expected: {scenario['expected']}")
        
        try:
            response = await chatbot.analyze_screen_with_vision(scenario['query'])
            print(f"\nü§ñ JARVIS: {response}")
            
        except Exception as e:
            print(f"‚ùå Error: {e}")
        
        await asyncio.sleep(2)


async def test_monitoring_window_changes():
    """Test real-time window change detection in monitoring mode"""
    
    chatbot = ClaudeVisionChatbot()
    
    if not chatbot.is_available():
        return
    
    print("\n\nüìä Testing Real-Time Window Monitoring\n")
    print("=" * 70)
    
    print("Starting window monitoring...")
    response = await chatbot.generate_response("Start monitoring my windows and desktop spaces")
    print(f"JARVIS: {response}")
    
    await asyncio.sleep(3)
    
    monitoring_queries = [
        "How many windows are open now?",
        "Did any new windows open?",
        "What changed since you started monitoring?",
        "Which window is active now?",
        "Are there windows on other spaces?"
    ]
    
    for query in monitoring_queries:
        print(f"\nüìç Monitoring Query: {query}")
        response = await chatbot.generate_response(query)
        print(f"ü§ñ JARVIS: {response}")
        await asyncio.sleep(2)
    
    print("\nStopping monitoring...")
    response = await chatbot.generate_response("Stop monitoring")
    print(f"JARVIS: {response}")


async def main():
    """Run all window intelligence tests"""
    
    print("üß™ JARVIS Window Intelligence Test Suite")
    print("Testing pure vision-based window understanding")
    print("=" * 70)
    
    print("\nüìù TEST INSTRUCTIONS:")
    print("For best results, prepare:")
    print("1. Multiple windows open across different applications")
    print("2. Multiple desktop spaces/virtual desktops")
    print("3. Some minimized windows")
    print("4. Mission Control or equivalent ready to trigger")
    print("5. Various window arrangements (tiled, overlapping, fullscreen)")
    
    print("\nThe tests will evaluate:")
    print("- Window counting across all states")
    print("- Understanding window relationships")
    print("- Detecting window states")
    print("- Recognizing workflow patterns")
    print("- Real-time monitoring of changes")
    
    print("\nPress Enter when ready...")
    input()
    
    # Run all test categories
    await test_window_counting()
    await test_window_relationships()
    await test_window_states()
    await test_workflow_detection()
    
    # Optional monitoring test
    user_input = input("\n\nTest real-time window monitoring? (y/n): ")
    if user_input.lower() == 'y':
        await test_monitoring_window_changes()
    
    print("\n\n‚ú® Window Intelligence Testing Complete!")
    print("\nKey Capabilities Demonstrated:")
    print("‚úÖ Counts windows across all views and states")
    print("‚úÖ Understands window hierarchy and relationships")
    print("‚úÖ Detects window states (active, minimized, hidden)")
    print("‚úÖ Recognizes workflow patterns from arrangements")
    print("‚úÖ Tracks window changes in real-time")
    print("\nJARVIS can now provide insights like:")
    print("- 'You have 15 windows across 4 desktop spaces'")
    print("- 'Chrome has 5 windows with ~20 tabs total'")
    print("- 'Your dev workflow has VS Code and Terminal arranged side-by-side'")
    print("- 'The Downloads dialog is currently on top of Safari'")


if __name__ == "__main__":
    asyncio.run(main())